openapi: 3.0.1
info:
  title: Digital Twin Management API
  description: API documentation for Digital Twin Management
  version: 1.0.0-SNAPSHOT
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /module/{moduleId}:
    get:
      tags:
        - module-controller
      summary: Get module by ID
      description: Returns the details of an existing module by its ID
      operationId: getModule
      parameters:
        - name: moduleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModuleResponseDto'
    put:
      tags:
        - module-controller
      summary: Update an existing module
      description: Updates the details of an existing module
      operationId: updateModule
      parameters:
        - name: moduleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleRequestDto'
        required: true
      responses:
        '200':
          description: Module updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModuleResponseDto'
    delete:
      tags:
        - module-controller
      summary: Delete a module
      description: Deletes a module by its ID
      operationId: deleteModule
      parameters:
        - name: moduleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Module deleted successfully
  /module:
    get:
      tags:
        - module-controller
      summary: Get all modules
      description: Returns a list of all modules
      operationId: getAllModules
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModuleResponseDto'
    post:
      tags:
        - module-controller
      summary: Create a new module
      description: Creates a new module based on the provided details
      operationId: createModule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleRequestDto'
        required: true
      responses:
        '201':
          description: Module created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModuleResponseDto'
  /module/{moduleId}/service:
    get:
      tags:
        - module-controller
      summary: Get services for a module
      description: Returns a list of services associated with the specified module
      operationId: getServicesForModule
      parameters:
        - name: moduleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SmartServiceResponseDto'
    post:
      tags:
        - module-controller
      summary: Create a new smart service
      description: Creates a new smart service withing a service based on the provided details
      operationId: createService
      parameters:
        - name: moduleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartServiceRequestDto'
        required: true
      responses:
        '200':
          description: Smart service created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SmartServiceResponseDto'
  /service:
    get:
      tags:
        - smart-service-controller
      summary: Get all smart services
      description: Returns a list of all smart services
      operationId: getAllSmartServices
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SmartServiceResponseDto'
  /service/{serviceId}:
    get:
      tags:
        - smart-service-controller
      summary: Get smart service by ID
      description: Returns the details of an existing smart service by its ID
      operationId: getSmartService
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SmartServiceResponseDto'
    delete:
      tags:
        - smart-service-controller
      summary: Delete a smart service
      description: Deletes a smart service by its ID
      operationId: deleteSmartService
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Smart service deleted successfully
  /module/{moduleId}/service/{serviceId}:
    delete:
      tags:
        - module-controller
      summary: Delete a service from a module
      description: Deletes a service by its ID from the specified module
      operationId: deleteServiceFromModule
      parameters:
        - name: moduleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: serviceId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Service deleted from module successfully
components:
  schemas:
    AssetConnectionConfig:
      type: object
      properties:
        operationProviders:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AssetOperationProviderConfig'
        subscriptionProviders:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AssetSubscriptionProviderConfig'
        valueProviders:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AssetValueProviderConfig'
    AssetOperationProviderConfig:
      type: object
      properties:
        inputValidationMode:
          type: string
          enum:
            - NONE
            - REQUIRE_PRESENT
            - REQUIRE_PRESENT_OR_DEFAULT
        inoutputValidationMode:
          type: string
          enum:
            - NONE
            - REQUIRE_PRESENT
            - REQUIRE_PRESENT_OR_DEFAULT
        outputValidationMode:
          type: string
          enum:
            - NONE
            - REQUIRE_PRESENT
            - REQUIRE_PRESENT_OR_DEFAULT
    AssetSubscriptionProviderConfig:
      type: object
    AssetValueProviderConfig:
      type: object
    ModuleRequestDto:
      type: object
      properties:
        aas:
          type: string
        format:
          type: string
          enum:
            - JSON
            - XML
            - RDF
            - JSONLD
            - AASX
        type:
          type: string
          enum:
            - DOCKER
            - INTERNAL
        assetConnections:
          type: array
          items:
            $ref: '#/components/schemas/AssetConnectionConfig'
    ModuleResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        endpoint:
          type: string
        services:
          type: array
          items:
            $ref: '#/components/schemas/SmartServiceResponseDto'
    SmartServiceResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        serviceId:
          type: integer
          format: int64
        endpoint:
          type: string
    SmartServiceRequestDto:
      type: object
      properties:
        serviceId:
          type: integer
          format: int64
